/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/ext_power.h>

#define BASE 0
#define BLE 1
#define WIN 2
/ {
    macros {
        mpv_tog_play: mpv_tog_play {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LWIN>
                , <&macro_tap &kp SPACE>
                , <&macro_release &kp LWIN>
                ;
        };
        mpv_next: mpv_next {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp RSHIFT>
                , <&macro_tap &kp RIGHT>
                , <&macro_release &kp RSHIFT>
                ;
        };
        mpv_prev: mpv_prev {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp RSHIFT>
                , <&macro_tap &kp LEFT>
                , <&macro_release &kp RSHIFT>
                ;
        };
        mpv_fwd: mpv_fwd {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp RCTRL>
                , <&macro_tap &kp LEFT>
                , <&macro_release &kp RCTRL>
                ;
        };
        mpv_bkwd: mpv_bkwd {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp RCTRL>
                , <&macro_tap &kp RIGHT>
                , <&macro_release &kp RCTRL>
                ;
        };
        to_ble: to_ble {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>
                , <&to BLE>
                ;
        };
        to_usb: to_usb {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_USB>
                , <&to WIN>
                ;
        };
    };
};
/ {
	behaviors {
            rot_encoder: rot_encoder {
              compatible = "zmk,behavior-sensor-rotate";
              #sensor-binding-cells = <0>;
              bindings = <&mpv_fwd>, <&mpv_bkwd>;
            };
        };
        keymap {
            compatible = "zmk,keymap";

            base_layer {
              display-name = "BASE";
              bindings = <
                // ╭─────────────┬──────────────┬──────────────────┬─────────────┬─────────────╮
                     &mo BLE      &kp C_PREVIOUS   &kp KP_ENTER      &kp BSPC      &to_usb
                // ╰─────────────┴──────────────┴──────────────────┴─────────────┴─────────────╯
              >;
              sensor-bindings = <&inc_dec_kp LEFT RIGHT>;
            };

            ble_layer {
              display-name = "BLE";
              bindings = <
                // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
                     &trans     &out OUT_TOG   &bt BT_PRV    &bt BT_NXT    &bt BT_CLR
                // ╰─────────────┴─────────────┴─────────────┴─────────────┴─────────────╯
              >;
              sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
            };

            win_layer {
              display-name = "WIN";
              bindings = <
                // ╭───────────────────┬──────────────┬──────────────────┬─────────────┬─────────────╮
                     &ext_power EP_OFF  &mpv_prev      &mpv_tog_play      &mpv_next     &to_ble
                // ╰───────────────────┴──────────────┴──────────────────┴─────────────┴─────────────╯
              >;
              sensor-bindings = <&rot_encoder>;
            };

        };
};
